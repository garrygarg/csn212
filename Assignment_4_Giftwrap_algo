
#include <iostream>
#include<bits/stdc++.h>
using namespace std;
struct Point
{
    int x, y;
};
 
int rotation(Point p, Point q, Point r)
{
    int val = (q.y - p.y) * (r.x - q.x) -
              (q.x - p.x) * (r.y - q.y);
 
    if (val == 0) return 0;  
    return (val > 0)? 1: 2; 
}

void giftwrap(Point points[], int n)
{
    
    if (n < 3) return;
 
    
    vector<Point> basket;
 
   
    int min = 0;
    for (int i = 1; i < n; i++)
        if (points[i].x < points[min].x)
            min = i;
 
   
    int p = min, q;
    do
    {
       
        basket.push_back(points[p]);
 
        q = (p+1)%n;
        
        for (int i = 0; i < n; i++)
        {
          
           if (rotation(points[p], points[i], points[q]) == 2)
               q = i;
        }
 
       
        p = q;
 
    } while (p != min);  // While we don't come to first point
 
    for (int i = 0; i < basket.size(); i++)
        cout << "(" << basket[i].x << ", "
              <<basket[i].y << ")\n";
}
int main() {
	
	
	Point points[] = {{7,0}, {2, 5}, {8,12}, {2,56,
                      {8,0}, {0, 0}, {3, 3},{0,9}};
    int n = sizeof(points)/sizeof(points[0]);
    giftwrap(points, n);
	return 0;
}
